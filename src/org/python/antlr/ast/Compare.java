// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.python.antlr.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Compare extends exprType {
    private exprType left;
    public exprType getLeft() {
        return left;
    }
    public void setLeft(exprType left) {
        this.left = left;
    }

    private ListWrapper<cmpopType> ops;
    public ListWrapper<cmpopType> getOps() {
        return ops;
    }
    public void setOps(java.util.List<cmpopType> ops) {
        this.ops = new ListWrapper<cmpopType>(ops);
    }

    private ListWrapper<exprType> comparators;
    public ListWrapper<exprType> getComparators() {
        return comparators;
    }
    public void setComparators(java.util.List<exprType> comparators) {
        this.comparators = new ListWrapper<exprType>(comparators);
    }


    private final static String[] fields = new String[] {"left", "ops",
                                                          "comparators"};
    public String[] get_fields() { return fields; }

    public Compare(exprType left, java.util.List<cmpopType> ops,
    java.util.List<exprType> comparators) {
        this.left = left;
        addChild(left);
        this.ops = ops;
        this.comparators = comparators;
        if (comparators != null) {
            for(PythonTree t : comparators) {
                addChild(t);
            }
        }
    }

    public Compare(Token token, exprType left, java.util.List<cmpopType> ops,
    java.util.List<exprType> comparators) {
        super(token);
        this.left = left;
        addChild(left);
        this.ops = ops;
        this.comparators = comparators;
        if (comparators != null) {
            for(PythonTree t : comparators) {
                addChild(t);
            }
        }
    }

    public Compare(int ttype, Token token, exprType left,
    java.util.List<cmpopType> ops, java.util.List<exprType> comparators) {
        super(ttype, token);
        this.left = left;
        addChild(left);
        this.ops = ops;
        this.comparators = comparators;
        if (comparators != null) {
            for(PythonTree t : comparators) {
                addChild(t);
            }
        }
    }

    public Compare(PythonTree tree, exprType left, java.util.List<cmpopType>
    ops, java.util.List<exprType> comparators) {
        super(tree);
        this.left = left;
        addChild(left);
        this.ops = ops;
        this.comparators = comparators;
        if (comparators != null) {
            for(PythonTree t : comparators) {
                addChild(t);
            }
        }
    }

    public String toString() {
        return "Compare";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Compare(");
        sb.append("left=");
        sb.append(dumpThis(left));
        sb.append(",");
        sb.append("ops=");
        sb.append(dumpThis(ops));
        sb.append(",");
        sb.append("comparators=");
        sb.append(dumpThis(comparators));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitCompare(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (left != null)
            left.accept(visitor);
        if (comparators != null) {
            for (PythonTree t : comparators) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
