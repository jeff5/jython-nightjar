// Autogenerated AST node
package org.python.antlr.ast;
import java.util.ArrayList;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.adapter.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class aliasType extends PythonTree {
    private String name;
    public String getInternalName() {
        return name;
    }
    public Object getName() {
        return name;
    }
    public void setName(Object name) {
        this.name = AstAdapters.to_identifier(name);
    }

    private String asname;
    public String getInternalAsname() {
        return asname;
    }
    public Object getAsname() {
        return asname;
    }
    public void setAsname(Object asname) {
        this.asname = AstAdapters.to_identifier(asname);
    }


    private final static String[] fields = new String[] {"name", "asname"};
    public String[] get_fields() { return fields; }

    public aliasType() {}
    public aliasType(Object name, Object asname) {
        setName(name);
        setAsname(asname);
    }

    public aliasType(Token token, String name, String asname) {
        super(token);
        this.name = name;
        this.asname = asname;
    }

    public aliasType(Integer ttype, Token token, String name, String asname) {
        super(ttype, token);
        this.name = name;
        this.asname = asname;
    }

    public aliasType(PythonTree tree, String name, String asname) {
        super(tree);
        this.name = name;
        this.asname = asname;
    }

    public String toString() {
        return "alias";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("alias(");
        sb.append("name=");
        sb.append(dumpThis(name));
        sb.append(",");
        sb.append("asname=");
        sb.append(dumpThis(asname));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        traverse(visitor);
        return null;
    }

    public void traverse(VisitorIF visitor) throws Exception {
    }

}
