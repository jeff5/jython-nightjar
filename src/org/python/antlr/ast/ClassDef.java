// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.adapter.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.ClassDef", base = PyObject.class)
public class ClassDef extends stmtType {
public static final PyType TYPE = PyType.fromClass(ClassDef.class);
    private String name;
    public String getInternalName() {
        return name;
    }
    @ExposedGet(name = "name")
    public PyObject getName() {
        return Py.None;
    }
    @ExposedSet(name = "name")
    public void setName(Object name) {
        this.name = AstAdapters.to_identifier(name);
    }

    private java.util.List<exprType> bases;
    public java.util.List<exprType> getInternalBases() {
        return bases;
    }
    @ExposedGet(name = "bases")
    public PyObject getBases() {
        return Py.None;
    }
    @ExposedSet(name = "bases")
    public void setBases(Object bases) {
        //FJW this.bases = AstAdapters.to_exprList(bases);
    }

    private java.util.List<stmtType> body;
    public java.util.List<stmtType> getInternalBody() {
        return body;
    }
    @ExposedGet(name = "body")
    public PyObject getBody() {
        return Py.None;
    }
    @ExposedSet(name = "body")
    public void setBody(Object body) {
        //FJW this.body = AstAdapters.to_stmtList(body);
    }

    private java.util.List<exprType> decorator_list;
    public java.util.List<exprType> getInternalDecorator_list() {
        return decorator_list;
    }
    @ExposedGet(name = "decorator_list")
    public PyObject getDecorator_list() {
        return Py.None;
    }
    @ExposedSet(name = "decorator_list")
    public void setDecorator_list(Object decorator_list) {
        //FJW this.decorator_list = AstAdapters.to_exprList(decorator_list);
    }


    private final static String[] fields = new String[] {"name", "bases",
                                                          "body",
                                                          "decorator_list"};
    public String[] get_fields() { return fields; }

    public ClassDef() {
        this(TYPE);
    }
    public ClassDef(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public ClassDef(Object name, Object bases, Object body, Object
    decorator_list) {
        setName(name);
        setBases(bases);
        setBody(body);
        setDecorator_list(decorator_list);
    }

    public ClassDef(Token token, String name, java.util.List<exprType> bases,
    java.util.List<stmtType> body, java.util.List<exprType> decorator_list) {
        super(token);
        this.name = name;
        this.bases = bases;
        if (bases == null) {
            this.bases = new ArrayList<exprType>();
        }
        for(PythonTree t : this.bases) {
            addChild(t);
        }
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<exprType>();
        }
        for(PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public ClassDef(Integer ttype, Token token, String name,
    java.util.List<exprType> bases, java.util.List<stmtType> body,
    java.util.List<exprType> decorator_list) {
        super(ttype, token);
        this.name = name;
        this.bases = bases;
        if (bases == null) {
            this.bases = new ArrayList<exprType>();
        }
        for(PythonTree t : this.bases) {
            addChild(t);
        }
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<exprType>();
        }
        for(PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public ClassDef(PythonTree tree, String name, java.util.List<exprType>
    bases, java.util.List<stmtType> body, java.util.List<exprType>
    decorator_list) {
        super(tree);
        this.name = name;
        this.bases = bases;
        if (bases == null) {
            this.bases = new ArrayList<exprType>();
        }
        for(PythonTree t : this.bases) {
            addChild(t);
        }
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<exprType>();
        }
        for(PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public String toString() {
        return "ClassDef";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("ClassDef(");
        sb.append("name=");
        sb.append(dumpThis(name));
        sb.append(",");
        sb.append("bases=");
        sb.append(dumpThis(bases));
        sb.append(",");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append("decorator_list=");
        sb.append(dumpThis(decorator_list));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitClassDef(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (bases != null) {
            for (PythonTree t : bases) {
                if (t != null)
                    t.accept(visitor);
            }
        }
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
        if (decorator_list != null) {
            for (PythonTree t : decorator_list) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
