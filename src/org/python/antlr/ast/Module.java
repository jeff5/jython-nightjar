// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Module extends modType {
    public java.util.List<stmtType> body;

    private final static String[] fields = new String[] {"body"};
    public String[] get_fields() { return fields; }

    public Module(java.util.List<stmtType> body) {
        this.body = body;
        if (body != null) {
            for(PythonTree t : body) {
                addChild(t);
            }
        }
    }

    public Module(Token token, java.util.List<stmtType> body) {
        super(token);
        this.body = body;
        if (body != null) {
            for(PythonTree t : body) {
                addChild(t);
            }
        }
    }

    public Module(int ttype, Token token, java.util.List<stmtType> body) {
        super(ttype, token);
        this.body = body;
        if (body != null) {
            for(PythonTree t : body) {
                addChild(t);
            }
        }
    }

    public Module(PythonTree tree, java.util.List<stmtType> body) {
        super(tree);
        this.body = body;
        if (body != null) {
            for(PythonTree t : body) {
                addChild(t);
            }
        }
    }

    public String toString() {
        return "Module";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Module(");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitModule(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

}
