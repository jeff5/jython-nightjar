// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.While", base = PyObject.class)
public class While extends stmtType {
public static final PyType TYPE = PyType.fromClass(While.class);
    private exprType test;
    public exprType getInternalTest() {
        return test;
    }
    @ExposedGet(name = "test")
    public PyObject getTest() {
        return test;
    }
    @ExposedSet(name = "test")
    public void setTest(PyObject test) {
        this.test = AstAdapters.to_expr(test);
    }

    private java.util.List<stmtType> body;
    public java.util.List<stmtType> getInternalBody() {
        return body;
    }
    @ExposedGet(name = "body")
    public PyObject getBody() {
        return new AstList(body, AstAdapters.stmtAdapter);
    }
    @ExposedSet(name = "body")
    public void setBody(PyObject body) {
        //FJW this.body = AstAdapters.to_stmtList(body);
    }

    private java.util.List<stmtType> orelse;
    public java.util.List<stmtType> getInternalOrelse() {
        return orelse;
    }
    @ExposedGet(name = "orelse")
    public PyObject getOrelse() {
        return new AstList(orelse, AstAdapters.stmtAdapter);
    }
    @ExposedSet(name = "orelse")
    public void setOrelse(PyObject orelse) {
        //FJW this.orelse = AstAdapters.to_stmtList(orelse);
    }


    private final static String[] fields = new String[] {"test", "body",
                                                          "orelse"};
    public String[] get_fields() { return fields; }

    public While() {
        this(TYPE);
    }
    public While(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public While(PyObject test, PyObject body, PyObject orelse) {
        setTest(test);
        setBody(body);
        setOrelse(orelse);
    }

    public While(Token token, exprType test, java.util.List<stmtType> body,
    java.util.List<stmtType> orelse) {
        super(token);
        this.test = test;
        addChild(test);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.orelse = orelse;
        if (orelse == null) {
            this.orelse = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.orelse) {
            addChild(t);
        }
    }

    public While(Integer ttype, Token token, exprType test,
    java.util.List<stmtType> body, java.util.List<stmtType> orelse) {
        super(ttype, token);
        this.test = test;
        addChild(test);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.orelse = orelse;
        if (orelse == null) {
            this.orelse = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.orelse) {
            addChild(t);
        }
    }

    public While(PythonTree tree, exprType test, java.util.List<stmtType> body,
    java.util.List<stmtType> orelse) {
        super(tree);
        this.test = test;
        addChild(test);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
        this.orelse = orelse;
        if (orelse == null) {
            this.orelse = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.orelse) {
            addChild(t);
        }
    }

    public String toString() {
        return "While";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("While(");
        sb.append("test=");
        sb.append(dumpThis(test));
        sb.append(",");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append("orelse=");
        sb.append(dumpThis(orelse));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitWhile(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (test != null)
            test.accept(visitor);
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
        if (orelse != null) {
            for (PythonTree t : orelse) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
