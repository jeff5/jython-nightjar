// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.ExtSlice", base = PyObject.class)
public class ExtSlice extends sliceType {
public static final PyType TYPE = PyType.fromClass(ExtSlice.class);
    private java.util.List<sliceType> dims;
    public java.util.List<sliceType> getInternalDims() {
        return dims;
    }
    @ExposedGet(name = "dims")
    public PyObject getDims() {
        return new AstList(dims, AstAdapters.sliceAdapter);
    }
    @ExposedSet(name = "dims")
    public void setDims(PyObject dims) {
        this.dims = AstAdapters.to_sliceList(dims);
    }


    private final static String[] fields = new String[] {"dims"};
@ExposedGet(name = "_fields")
    public String[] get_fields() { return fields; }

    public ExtSlice() {
        this(TYPE);
    }
    public ExtSlice(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public ExtSlice(PyObject dims) {
        setDims(dims);
    }

    public ExtSlice(Token token, java.util.List<sliceType> dims) {
        super(token);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<sliceType>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    public ExtSlice(Integer ttype, Token token, java.util.List<sliceType> dims)
    {
        super(ttype, token);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<sliceType>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    public ExtSlice(PythonTree tree, java.util.List<sliceType> dims) {
        super(tree);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<sliceType>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "ExtSlice";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("ExtSlice(");
        sb.append("dims=");
        sb.append(dumpThis(dims));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitExtSlice(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (dims != null) {
            for (PythonTree t : dims) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

}
