// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.Print", base = PyObject.class)
public class Print extends stmtType {
public static final PyType TYPE = PyType.fromClass(Print.class);
    private exprType dest;
    public exprType getInternalDest() {
        return dest;
    }
    @ExposedGet(name = "dest")
    public PyObject getDest() {
        return dest;
    }
    @ExposedSet(name = "dest")
    public void setDest(PyObject dest) {
        this.dest = AstAdapters.to_expr(dest);
    }

    private java.util.List<exprType> values;
    public java.util.List<exprType> getInternalValues() {
        return values;
    }
    @ExposedGet(name = "values")
    public PyObject getValues() {
        return new AstList(values, AstAdapters.exprAdapter);
    }
    @ExposedSet(name = "values")
    public void setValues(PyObject values) {
        //FJW this.values = AstAdapters.to_exprList(values);
    }

    private Boolean nl;
    public Boolean getInternalNl() {
        return nl;
    }
    @ExposedGet(name = "nl")
    public PyObject getNl() {
        if (nl) return Py.True;
        return Py.False;
    }
    @ExposedSet(name = "nl")
    public void setNl(PyObject nl) {
        this.nl = AstAdapters.to_bool(nl);
    }


    private final static String[] fields = new String[] {"dest", "values",
                                                          "nl"};
    public String[] get_fields() { return fields; }

    public Print() {
        this(TYPE);
    }
    public Print(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public Print(PyObject dest, PyObject values, PyObject nl) {
        setDest(dest);
        setValues(values);
        setNl(nl);
    }

    public Print(Token token, exprType dest, java.util.List<exprType> values,
    Boolean nl) {
        super(token);
        this.dest = dest;
        addChild(dest);
        this.values = values;
        if (values == null) {
            this.values = new ArrayList<exprType>();
        }
        for(PythonTree t : this.values) {
            addChild(t);
        }
        this.nl = nl;
    }

    public Print(Integer ttype, Token token, exprType dest,
    java.util.List<exprType> values, Boolean nl) {
        super(ttype, token);
        this.dest = dest;
        addChild(dest);
        this.values = values;
        if (values == null) {
            this.values = new ArrayList<exprType>();
        }
        for(PythonTree t : this.values) {
            addChild(t);
        }
        this.nl = nl;
    }

    public Print(PythonTree tree, exprType dest, java.util.List<exprType>
    values, Boolean nl) {
        super(tree);
        this.dest = dest;
        addChild(dest);
        this.values = values;
        if (values == null) {
            this.values = new ArrayList<exprType>();
        }
        for(PythonTree t : this.values) {
            addChild(t);
        }
        this.nl = nl;
    }

    public String toString() {
        return "Print";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Print(");
        sb.append("dest=");
        sb.append(dumpThis(dest));
        sb.append(",");
        sb.append("values=");
        sb.append(dumpThis(values));
        sb.append(",");
        sb.append("nl=");
        sb.append(dumpThis(nl));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitPrint(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (dest != null)
            dest.accept(visitor);
        if (values != null) {
            for (PythonTree t : values) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
