// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.python.antlr.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Print extends stmtType {
    private exprType dest;
    public exprType getInternalDest() {
        return dest;
    }
    public void setDest(exprType dest) {
        this.dest = dest;
    }

    private ListWrapper<exprType> values;
    public ListWrapper<exprType> getInternalValues() {
        return values;
    }
    public void setValues(java.util.List<exprType> values) {
        this.values = new ListWrapper<exprType>(values);
    }

    private boolean nl;
    public boolean getInternalNl() {
        return nl;
    }
    public void setNl(boolean nl) {
        this.nl = nl;
    }


    private final static String[] fields = new String[] {"dest", "values",
                                                          "nl"};
    public String[] get_fields() { return fields; }

    public Print(exprType dest, java.util.List<exprType> values, boolean nl) {
        this.dest = dest;
        addChild(dest);
        this.values = new ListWrapper<exprType>(values);
        if (values != null) {
            for(PythonTree t : values) {
                addChild(t);
            }
        }
        this.nl = nl;
    }

    public Print(Token token, exprType dest, java.util.List<exprType> values,
    boolean nl) {
        super(token);
        this.dest = dest;
        addChild(dest);
        this.values = new ListWrapper<exprType>(values);
        if (values != null) {
            for(PythonTree t : values) {
                addChild(t);
            }
        }
        this.nl = nl;
    }

    public Print(int ttype, Token token, exprType dest,
    java.util.List<exprType> values, boolean nl) {
        super(ttype, token);
        this.dest = dest;
        addChild(dest);
        this.values = new ListWrapper<exprType>(values);
        if (values != null) {
            for(PythonTree t : values) {
                addChild(t);
            }
        }
        this.nl = nl;
    }

    public Print(PythonTree tree, exprType dest, java.util.List<exprType>
    values, boolean nl) {
        super(tree);
        this.dest = dest;
        addChild(dest);
        this.values = new ListWrapper<exprType>(values);
        if (values != null) {
            for(PythonTree t : values) {
                addChild(t);
            }
        }
        this.nl = nl;
    }

    public String toString() {
        return "Print";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Print(");
        sb.append("dest=");
        sb.append(dumpThis(dest));
        sb.append(",");
        sb.append("values=");
        sb.append(dumpThis(values));
        sb.append(",");
        sb.append("nl=");
        sb.append(dumpThis(nl));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitPrint(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (dest != null)
            dest.accept(visitor);
        if (values != null) {
            for (PythonTree t : values) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
