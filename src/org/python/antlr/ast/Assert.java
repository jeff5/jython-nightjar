// Autogenerated AST node
package org.python.antlr.ast;
import java.util.ArrayList;
import org.python.antlr.AstAdapter;
import org.python.antlr.PythonTree;
import org.python.antlr.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Assert extends stmtType {
    private exprType test;
    public exprType getInternalTest() {
        return test;
    }
    public Object getTest() {
        return test;
    }
    public void setTest(Object test) {
        this.test = AstAdapter.to_expr(test);
    }

    private exprType msg;
    public exprType getInternalMsg() {
        return msg;
    }
    public Object getMsg() {
        return msg;
    }
    public void setMsg(Object msg) {
        this.msg = AstAdapter.to_expr(msg);
    }


    private final static String[] fields = new String[] {"test", "msg"};
    public String[] get_fields() { return fields; }

    public Assert() {}
    public Assert(Object test, Object msg) {
        setTest(test);
        setMsg(msg);
    }

    public Assert(Token token, exprType test, exprType msg) {
        super(token);
        this.test = test;
        addChild(test);
        this.msg = msg;
        addChild(msg);
    }

    public Assert(Integer ttype, Token token, exprType test, exprType msg) {
        super(ttype, token);
        this.test = test;
        addChild(test);
        this.msg = msg;
        addChild(msg);
    }

    public Assert(PythonTree tree, exprType test, exprType msg) {
        super(tree);
        this.test = test;
        addChild(test);
        this.msg = msg;
        addChild(msg);
    }

    public String toString() {
        return "Assert";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Assert(");
        sb.append("test=");
        sb.append(dumpThis(test));
        sb.append(",");
        sb.append("msg=");
        sb.append(dumpThis(msg));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitAssert(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (test != null)
            test.accept(visitor);
        if (msg != null)
            msg.accept(visitor);
    }

    private int lineno = -1;
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    public void setCol_offset(int num) {
        col_offset = num;
    }

}
