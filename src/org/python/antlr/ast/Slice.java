// Autogenerated AST node
package org.python.antlr.ast;
import java.util.ArrayList;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.adapter.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class Slice extends sliceType {
    private exprType lower;
    public exprType getInternalLower() {
        return lower;
    }
    public Object getLower() {
        return lower;
    }
    public void setLower(Object lower) {
        this.lower = AstAdapters.to_expr(lower);
    }

    private exprType upper;
    public exprType getInternalUpper() {
        return upper;
    }
    public Object getUpper() {
        return upper;
    }
    public void setUpper(Object upper) {
        this.upper = AstAdapters.to_expr(upper);
    }

    private exprType step;
    public exprType getInternalStep() {
        return step;
    }
    public Object getStep() {
        return step;
    }
    public void setStep(Object step) {
        this.step = AstAdapters.to_expr(step);
    }


    private final static String[] fields = new String[] {"lower", "upper",
                                                          "step"};
    public String[] get_fields() { return fields; }

    public Slice() {}
    public Slice(Object lower, Object upper, Object step) {
        setLower(lower);
        setUpper(upper);
        setStep(step);
    }

    public Slice(Token token, exprType lower, exprType upper, exprType step) {
        super(token);
        this.lower = lower;
        addChild(lower);
        this.upper = upper;
        addChild(upper);
        this.step = step;
        addChild(step);
    }

    public Slice(Integer ttype, Token token, exprType lower, exprType upper,
    exprType step) {
        super(ttype, token);
        this.lower = lower;
        addChild(lower);
        this.upper = upper;
        addChild(upper);
        this.step = step;
        addChild(step);
    }

    public Slice(PythonTree tree, exprType lower, exprType upper, exprType
    step) {
        super(tree);
        this.lower = lower;
        addChild(lower);
        this.upper = upper;
        addChild(upper);
        this.step = step;
        addChild(step);
    }

    public String toString() {
        return "Slice";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Slice(");
        sb.append("lower=");
        sb.append(dumpThis(lower));
        sb.append(",");
        sb.append("upper=");
        sb.append(dumpThis(upper));
        sb.append(",");
        sb.append("step=");
        sb.append(dumpThis(step));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitSlice(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (lower != null)
            lower.accept(visitor);
        if (upper != null)
            upper.accept(visitor);
        if (step != null)
            step.accept(visitor);
    }

}
