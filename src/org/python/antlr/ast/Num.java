// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.Num", base = PyObject.class)
public class Num extends exprType {
public static final PyType TYPE = PyType.fromClass(Num.class);
    private Object n;
    public Object getInternalN() {
        return n;
    }
    @ExposedGet(name = "n")
    public PyObject getN() {
        return (PyObject)n;
    }
    @ExposedSet(name = "n")
    public void setN(PyObject n) {
        this.n = AstAdapters.to_object(n);
    }


    private final static String[] fields = new String[] {"n"};
@ExposedGet(name = "_fields")
    public String[] get_fields() { return fields; }

    public Num() {
        this(TYPE);
    }
    public Num(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public Num(PyObject n) {
        setN(n);
    }

    public Num(Token token, Object n) {
        super(token);
        this.n = n;
    }

    public Num(Integer ttype, Token token, Object n) {
        super(ttype, token);
        this.n = n;
    }

    public Num(PythonTree tree, Object n) {
        super(tree);
        this.n = n;
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "Num";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Num(");
        sb.append("n=");
        sb.append(dumpThis(n));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitNum(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
    }

    private int lineno = -1;
@ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

@ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
@ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

@ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

}
