// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.adapter.ListWrapper;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.Interactive", base = PyObject.class)
public class Interactive extends modType {
public static final PyType TYPE = PyType.fromClass(Interactive.class);
    private java.util.List<stmtType> body;
    public java.util.List<stmtType> getInternalBody() {
        return body;
    }
    @ExposedGet(name = "body")
    public PyObject getBody() {
        return Py.None;
    }
    @ExposedSet(name = "body")
    public void setBody(Object body) {
        //FJW this.body = AstAdapters.to_stmtList(body);
    }


    private final static String[] fields = new String[] {"body"};
    public String[] get_fields() { return fields; }

    public Interactive() {
        this(TYPE);
    }
    public Interactive(PyType subType) {
        super(subType);
    }
    @ExposedNew
    @ExposedMethod
    public void Module___init__(PyObject[] args, String[] keywords) {}
    public Interactive(Object body) {
        setBody(body);
    }

    public Interactive(Token token, java.util.List<stmtType> body) {
        super(token);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
    }

    public Interactive(Integer ttype, Token token, java.util.List<stmtType>
    body) {
        super(ttype, token);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
    }

    public Interactive(PythonTree tree, java.util.List<stmtType> body) {
        super(tree);
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmtType>();
        }
        for(PythonTree t : this.body) {
            addChild(t);
        }
    }

    public String toString() {
        return "Interactive";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Interactive(");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitInteractive(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

}
